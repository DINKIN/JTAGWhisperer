#!/usr/bin/python
#
# The JTAG Whisperer https://github.com/sowbug/JTAGWhisperer
# Copyright 2012 Mike Tsao http://www.sowbug.com/
#
# See LICENSE file for BSD-style licensing information.
#

import getopt
import sys

try:
  import serial
except ImportError:
  print """
You don't have pyserial installed. Please install it and try again.
"easy_install pyserial" or "pip install pyserial" will probably work.
"""

def write_xsvf(s, xsvf):
  bytes_to_write = len(xsvf)
  while bytes_to_write > 0:
    bytes_written = s.write(xsvf)
    xsvf = xsvf[bytes_written:]
    bytes_to_write -= bytes_written

def program(xsvf_filename, port, bps):
  f = open(xsvf_filename, 'rb')
  xsvf = f.read()
  f.close()

  s = serial.Serial(port=port, baudrate=bps, xonxoff=True)
  s.flushInput()
  s.flushOutput()

  is_device_ready = False
  while True:
    line = s.readline().strip()
    if len(line) == 0:
      continue
    command = line[0]
    text = line[1:].strip()

    if command == 'R':
      if text == 'XSVF':
        if not is_device_ready:
          is_device_ready = True
          print 'Sending file "%s" of length %d.' % (xsvf_filename, len(xsvf))
          write_xsvf(s, xsvf)
          continue
      print 'Ignoring spurious ready:', text
    elif command == 'Q':
      print 'Received device quit:', text
      break
    elif command == 'D':
      print 'Device:', text
    else:
      print 'Unrecognized line:', line

  s.close()

  return 0

def usage():
  print 'send_xsvf [-b bps] -p /dev/your_arduino_serial_port xsvf_filename'

def main():
  try:
    opts, args = getopt.getopt(sys.argv[1:], 'bp:', ['bps=', 'port='])
  except getopt.GetoptError, err:
    print str(err)
    usage()
    sys.exit(2)
  xsvf_filename = args[0]
  port = None
  bps = 57600

  for o, a in opts:
    if o in ['-b', '--bps']:
      bps = int(a)
    elif o in ['-p', '--port']:
      port = a
    else:
      assert False, 'unhandled option'

  if port is None:
    usage()
    sys.exit(2)

  sys.exit(program(xsvf_filename, port, bps))

if __name__ == '__main__':
    main()
