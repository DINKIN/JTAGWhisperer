#!/usr/bin/python
#
# The JTAG Whisperer https://github.com/sowbug/JTAGWhisperer
# Copyright 2012 Mike Tsao http://www.sowbug.com/
#
# See LICENSE file for BSD-style licensing information.
#

import binascii
import getopt
import sys

try:
  import serial
except ImportError:
  print """
You don't have pyserial installed. Please install it and try again.
"easy_install pyserial" or "pip install pyserial" will probably work.
"""

total_bytes_sent = 0
def send_xsvf_chunk(s, xsvf):
  global total_bytes_sent
  if len(xsvf) == 0:
    print 'Problem: tried to send empty xsvf.'
    return xsvf
  chunk = xsvf[:32]
  xsvf = xsvf[len(chunk):]
  bytes_to_write = len(chunk)
  while bytes_to_write > 0:
    bytes_written = s.write(chunk)
    total_bytes_sent += bytes_written
    chunk = chunk[bytes_written:]
    bytes_to_write -= bytes_written
  print '\rSent: %8d bytes, %8d remaining' % (total_bytes_sent, len(xsvf)),
  return xsvf

def get_xsvf_checksum(xsvf):
  xsvf_sum = 0
  for c in xsvf:
    xsvf_sum += ord(c)
  return (xsvf_sum, len(xsvf))

def program(xsvf_filename, port, bps):
  global total_bytes_sent

  f = open(xsvf_filename, 'rb')
  xsvf = f.read()
  f.close()
  print 'Ready to send file of size %d bytes.' % (len(xsvf))

  (xsvf_sum, xsvf_len) = get_xsvf_checksum(xsvf)

  s = serial.Serial(port=port, baudrate=bps, rtscts=True)
  s.flushInput()
  s.flushOutput()

  is_device_ready = False
  while True:
    line = s.readline().strip()
    if len(line) == 0:
      continue
    command = line[0]
    text = line[1:].strip()

    if command == 'R':
      if text == 'XSVF':
        if not is_device_ready:
          is_device_ready = True
          print 'Device is ready.'
          continue
      elif text == 'SEND':
        xsvf = send_xsvf_chunk(s, xsvf)
        continue
      else:
        print 'Unrecognized ready command:', text
    elif command == 'Q':
      print
      print 'Received device quit:', text
      break
    elif command == 'D':
      print
      print 'Device:', text
    elif command == '!':
      print
      print 'IMPORTANT:', text
    else:
      print
      print 'Unrecognized line:', line

  s.close()
  print 'Expected checksum: %lx/%lx.' % (xsvf_sum, xsvf_len)
  return 0

def usage():
  print 'send_xsvf [-b bps] -p /dev/your_arduino_serial_port xsvf_filename'

def main():
  try:
    opts, args = getopt.getopt(sys.argv[1:], 'bp:', ['bps=', 'port='])
  except getopt.GetoptError, err:
    print str(err)
    usage()
    sys.exit(2)
  xsvf_filename = args[0]
  port = None
  bps = 57600

  for o, a in opts:
    if o in ['-b', '--bps']:
      bps = int(a)
    elif o in ['-p', '--port']:
      port = a
    else:
      assert False, 'unhandled option'

  if port is None:
    usage()
    sys.exit(2)

  sys.exit(program(xsvf_filename, port, bps))

if __name__ == '__main__':
    main()
